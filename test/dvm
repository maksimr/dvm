#!/usr/bin/env bats
source ./dvm
source ./node_modules/bats-support/src/error.bash
source ./node_modules/bats-support/src/output.bash
source ./node_modules/bats-assert/src/assert.bash

curl() {
  return 0;
}
unzip() {
  return 0;
}
move-dir() {
  return 0;
}

@test "should print help" {
  run dvm help
    assert_success
}

@test "should print version" {
  run dvm version
    assert_output -e '^[0-9]+\.[0-9]+\.[0-9]+$'
}

@test "should print list of available stable dart versions" {
  curl() {
    echo '{'
      echo '  "kind": "storage#objects",'
      echo '  "prefixes": ['
      echo '     "channels/stable/release/1.11.0/",'
      echo '     "channels/stable/release/1.11.1/",'
      echo '     "channels/stable/release/1.11.3/",'
      echo '     "channels/stable/release/1.12.0/",'
      echo '     "channels/stable/release/1.12.1/"'
      echo '  ]'
      echo '}'
  }
  run dvm ls-remote
    assert_success
    assert_equal "${lines[0]}" "1.11.0"
}

@test "should print list of available dev dart versions" {
  curl() {
    echo '{'
      echo '  "kind": "storage#objects",'
      echo '  "prefixes": ['
      echo '     "channels/dev/release/1.11.0/",'
      echo '     "channels/dev/release/1.11.1/",'
      echo '     "channels/dev/release/1.11.3/",'
      echo '     "channels/dev/release/1.12.0/",'
      echo '     "channels/dev/release/1.12.1/"'
      echo '  ]'
      echo '}'
  }
  run dvm ls-remote --channel=dev
    assert_success
    assert_equal "${lines[0]}" "1.11.0"
}

@test "should print error if user does not pass version" {
  run dvm install
    assert_failure
    assert_output 'ERROR: Version is required (dvm install <version>)'
}

@test "should download SDK" {
  curl() {
    echo "$3"
  }
  local version=1.11.0
  local platform=$(os-platform)
  local architecture=$(os-architecture)
  run dvm install $version
    assert_success
    assert_output -e "https://storage.googleapis.com/dart-archive/channels/stable/release/$version/sdk/dartsdk-$platform-$architecture-release.zip"
}

@test "should try to download SDK from dev channel if stable return error" {
  curl() {
    case "$3" in
      *"channels/dev/release/"*) return 0;;
      * ) return 1;;
    esac
  }
  run dvm install 1.11.0
    assert_success
}

@test "should print error if download SDK failed" {
  curl() {
    return 1;
  }
  run dvm install 1.11.0
    assert_failure
    assert_output 'ERROR: Cannot download Dart SDK'
}

@test "should unzip downloaded SDK" {
  curl() {
    return 0;
  }
  unzip() {
    local platform=$(os-platform)
    local architecture=$(os-architecture)
    case "$1" in
      *"dartsdk-$platform-$architecture-release.zip"*) return 0;;
      * ) return 1;;
    esac
  }
  run dvm install 1.11.0
    assert_success
}

@test "should move downloaded SDK to dvm root directory" {
  local version=1.11.0
  move-dir() {
    case "$2" in
      *"$DVM_DIR/versions/dart-sdk/$version"*) return 0;;
      * ) return 1;;
    esac
  }
  run dvm install $version
    assert_success
}
